############################################################################
## Macros                                                                  #
############################################################################
if [ -f "$HOME/.bash_functions" ]; then
    . "$HOME/.bash_functions"
fi

############################################################################
## WSL - Windows home directory of the current User                        #
############################################################################
if grep -qi Microsoft /proc/version; then
    unset WINHOME
    export WINHOME="/mnt/c/Users/galan"
    alias xclip='xclip -sel clip'
fi

############################################################################
## Jupyter Lab : Sandbox environment                                       #
############################################################################
#!/bin/bash

# Chemin du répertoire à vérifier
DIR="$HOME/Workspace/sandbox"

# Vérifier si le répertoire existe
if [ -d "$DIR" ]; then
    # Exporter les variables d'environnement
    export SANDBOX_HOME="$HOME/Workspace/sandbox"
    if grep -qi Microsoft /proc/version; then
        export BROWSER="/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe"
    fi

    # Fonction pour démarrer Jupyter Lab dans l'environnement sandbox
    function jl() {
        ve "$SANDBOX_HOME"
        jupyter lab
        deactivate
        cd "$HOME" || return
    }

    # Fonction pour démarrer IPython dans l'environnement sandbox
    function ipy() {
        ve "$SANDBOX_HOME"
        ipython
        deactivate
        cd "$HOME" || return
    }
fi

############################################################################
## Git completion                                                          #
############################################################################
REPO="git/git"
FILE_PATH="contrib/completion/git-completion.bash"
LOCAL_FILE="$HOME/.git-completion.bash"
API_URL="https://api.github.com/repos/$REPO/commits?path=$FILE_PATH&per_page=1"

# Fonction pour obtenir le dernier commit SHA du fichier depuis GitHub
get_latest_commit_sha() {
    curl -s "$API_URL" | jq -r '.[0].sha'
}

# Fonction pour obtenir le dernier commit SHA du fichier local
get_local_commit_sha() {
    head -n 1 "$LOCAL_FILE.sha"
}

# Télécharger le fichier distant
download_file() {
    curl -s "https://raw.githubusercontent.com/$REPO/master/$FILE_PATH" -o "$LOCAL_FILE"
}

# Obtenir le dernier commit SHA du fichier depuis GitHub
LATEST_COMMIT_SHA=$(get_latest_commit_sha)

# Vérifier si le fichier local existe et s'il a un SHA enregistré
if [ -f "$LOCAL_FILE" ] && [ -f "$LOCAL_FILE.sha" ]; then
    # Obtenir le dernier commit SHA du fichier local
    LOCAL_COMMIT_SHA=$(get_local_commit_sha)

    # Comparer les SHA
    if [ "$LATEST_COMMIT_SHA" != "$LOCAL_COMMIT_SHA" ]; then
        # Mettre à jour le fichier local
        download_file
        echo "$LATEST_COMMIT_SHA" >"$LOCAL_FILE.sha"
        echo "Le fichier $LOCAL_FILE a été mis à jour."
    # else
    #     echo "Le fichier $LOCAL_FILE est déjà à jour."
    fi
else
    # Télécharger le fichier et enregistrer le SHA
    download_file
    echo "$LATEST_COMMIT_SHA" >"$LOCAL_FILE.sha"
    echo "Le fichier $LOCAL_FILE a été téléchargé."
fi

# Sourcer le fichier local
source "$LOCAL_FILE"

############################################################################
## NodeJS                                                                  #
############################################################################
# Define the directory where NVM (Node Version Manager) will be installed
export NVM_DIR="$HOME/.nvm"

# Check if the nvm.sh script exists in the NVM_DIR directory
# If it exists, load it (this loads NVM)
if [ -s "$NVM_DIR/nvm.sh" ]; then
  source "$NVM_DIR/nvm.sh"
fi

# Check if the bash_completion script for NVM exists in the NVM_DIR
# directory. If it exists, load it (this loads NVM bash completion)
if [ -s "$NVM_DIR/bash_completion" ]; then
  source "$NVM_DIR/bash_completion"
fi

############################################################################
## Remove any potential duplicate paths present in the PATH variable.      #                                                  #
############################################################################
clean_path

############################################################################
## if Neovim is installed in the /usr/local/nvim folder, update the PATH   # 
############################################################################
export NVIM_HOME=/usr/local/nvim
if [ -d "$NVIM_HOME/bin" ]; then
  PATH=/usr/local/nvim/bin:$PATH
  export EDITOR=nvim
else
  export EDITOR=ED
fi

############################################################################
## Start startship shell                                                   #
############################################################################
version_output=$(starship --version | head -n 1) 
if [[ $version_output =~ ^starship\ [0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    eval "$(starship init bash)"
else
    echo "Starship is not yet installed in this environment"
fi

############################################################################
# Add Pyhton packager uv                                                   #
############################################################################
version_output=$($HOME/.local/bin/uv --version)

if [[ $version_output =~ ^uv\ [0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    source $HOME/.local/bin/env
else
    echo "uv is not yet installed in this environment"
fi

############################################################################
## Groovy                                                                  #
## This must be at the end of the file for SDKMAN to work !                #
############################################################################
#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
# Configuration for SDKMAN
export SDKMAN_DIR="$HOME/.sdkman"
if [[ -s "$SDKMAN_DIR/bin/sdkman-init.sh" ]]; then
    source "$SDKMAN_DIR/bin/sdkman-init.sh"
fi

# Configuration for GTK modules
export GTK_MODULES=canberra-gtk-module
